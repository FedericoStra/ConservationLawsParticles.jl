var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ConservationLawsParticles","category":"page"},{"location":"#ConservationLawsParticles.jl","page":"Home","title":"ConservationLawsParticles.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ConservationLawsParticles.jl.","category":"page"},{"location":"#Library","page":"Home","title":"Library","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Public","page":"Home","title":"Public","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [ConservationLawsParticles]\nPrivate = false","category":"page"},{"location":"#ConservationLawsParticles.empty_like","page":"Home","title":"ConservationLawsParticles.empty_like","text":"empty_like(x::AbstractArray)\n\nCreates an empty array with the same size and eltype of x.\n\nExamples\n\njulia> empty_like([1 2 3; 4 5 6])\n2×3 Array{Int64,2}:\n 0  140456850103040                1\n 1                3  140456850103041\n\n\n\n\n\n","category":"function"},{"location":"#ConservationLawsParticles.make_velocity-Tuple{Function, Function, Function}","page":"Home","title":"ConservationLawsParticles.make_velocity","text":"make_velocity(V::Function, Wprime::Function, mobility::Function)\n\nCreates a function velocity(dx, x, p, t) that computes the velocity of the particles under the influence of an external force V, a mutual interaction Wprime and the congestion given by mobility.\n\n\n\n\n\n","category":"method"},{"location":"#ConservationLawsParticles.pwc_densities-Union{Tuple{Vararg{AbstractVector{var\"#s1\"} where var\"#s1\"<:Real, N}}, Tuple{N}} where N","page":"Home","title":"ConservationLawsParticles.pwc_densities","text":"pwc_densities(xs::AbstractVector...)\n\n\n\n\n\n","category":"method"},{"location":"#ConservationLawsParticles.pwc_density-Tuple{AbstractVector{var\"#s1\"} where var\"#s1\"<:Real, AbstractVector{var\"#s5\"} where var\"#s5\"<:Real}","page":"Home","title":"ConservationLawsParticles.pwc_density","text":"pwc_density(x::AbstractVector, y::AbstractVector)\n\nThe returned x_dens is indexed as x_dens[x_or_y, left_or_right, i].\n\n\n\n\n\n","category":"method"},{"location":"#ConservationLawsParticles.pwc_density-Tuple{AbstractVector{var\"#s3\"} where var\"#s3\"<:Real}","page":"Home","title":"ConservationLawsParticles.pwc_density","text":"pwc_density(x::AbstractVector{var\"#s3\"} where var\"#s3\"<:Real) -> Any\n\n\npwc_density(x::AbstractVector)\n\nReturns the piecewise constant probability density from the quantile particle positions.\n\nLet the quantile particles be at positions x₀, x₁, …, xₙ (remember that in Julia they are actually x[1], x[2], ..., x[n], x[n+1]). The returned array R is such that R[1] = R[n+2] = 0 and R[i] = 1 / (N * (x[i] - x[i-1])) for the intermediate indices (this formula holds also for the first and last entry if we assume x[0] = -∞ and x[n+2] = ∞).\n\nExamples\n\njulia> pwc_density([0, 1, 3])\n4-element Vector{Float64}:\n 0.0\n 0.5\n 0.25\n 0.0\n\n\n\n\n\n","category":"method"},{"location":"#ConservationLawsParticles.@time_independent-Tuple{Any}","page":"Home","title":"ConservationLawsParticles.@time_independent","text":"Automatically define a method which takes time as first argument and discards it.\n\nExamples\n\nThe definition\n\n@time_independent V(x) = -x^3\n\nis equivalent to\n\nV(x) = -x^3\nV(t, x) = V(x)\n\nThis also works with more than one argument, for instance\n\n@time_independent V(x₁, x₂) = x₁ * x₂\n\nis equivalent to\n\nV(x₁, x₂) = x₁ * x₂\nV(t, x₁, x₂) = V(x₁, x₂)\n\n\n\n\n\n","category":"macro"},{"location":"#Private","page":"Home","title":"Private","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [ConservationLawsParticles]\nPublic = false","category":"page"}]
}
