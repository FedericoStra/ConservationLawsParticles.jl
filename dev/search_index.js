var documenterSearchIndex = {"docs":
[{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Two-species","page":"Examples","title":"Two species","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ConservationLawsParticles\nusing RecursiveArrayTools, DifferentialEquations, Plots\n\n# external velocities\nVr(t, x) = 2.\nVl(t, x) = -2.\n# interactions\nW_attr(t, r) = 5 * log(abs(r) + 1)\nW_rep(t, r) = -2 * log(abs(r) + 1)\nW(t, r) = 2 * (exp(abs(r)/4) + exp(-2abs(r)))\n# mobilities\nmobρ(ρ, σ) = max(2 - ρ - 0.5σ, 0)\nmobσ(ρ, σ) = max(2 - σ - 0.5ρ, 0)\n\nimodel = IntegratedModel(\n    (Vr, Vl),\n    ((W, W_rep),\n     (W_rep, W)),\n    (mobρ, mobσ))\n\nn = 20\nx0 = ArrayPartition(\n    vcat(range(-2., -1.5, length=n), range(-1., -.5, length=n)),\n    vcat(range(.5, 1.5, length=2n)))\n\ntspan = (0., 1.2)\n\nprob = ODEProblem(velocities!, x0, tspan, imodel)\n\nsol = solve(prob, BS5(), reltol=1e-6, abstol=1e-6)\n\nplot(legend=false)\nplot!(sol, vars=1:2n, color=:blue)\nplot!(sol, vars=2n+1:4n, color=:red)\nplot!(title=\"2-species integrated scheme\", xlabel=\"time\", ylabel=\"position\")\n\nsavefig(\"two-species.png\"); nothing # hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"n = 60\nx0 = ArrayPartition(\n    vcat(range(-2., -1.5, length=n), range(-1., -.5, length=n)),\n    vcat(range(.5, 1.5, length=2n)))\n\ntspan = (0., 1.2)\n\nprob = ODEProblem(velocities!, x0, tspan, imodel)\n\nsol = solve(prob, BS5(), reltol=1e-7, abstol=1e-7)\n\nanim = @animate for t in tspan[1]:1/48:tspan[2]\n    p = plot(title=\"2-species integrated scheme\", xlabel=\"position\", ylabel=\"density\",\n        legend=false, xlims=(-4,4), ylims=(0,1))\n    plot_density!(p, sol(t).x[1], color=:blue)\n    plot_density!(p, sol(t).x[2], color=:red)\nend\n\ngif(anim, \"two-species.gif\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ConservationLawsParticles","category":"page"},{"location":"#ConservationLawsParticles.jl","page":"Home","title":"ConservationLawsParticles.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ConservationLawsParticles.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Particle method for 1D conservation laws.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package implements the deterministic particle schemes described in the article Entropy solutions of non-local scalar conservation laws with congestion via deterministic particle method, E. Radici, F. Stra (2021), https://arxiv.org/abs/2107.10760.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can cite the article as","category":"page"},{"location":"","page":"Home","title":"Home","text":"@online{RadiciStra2021,\n    title={Entropy solutions of non-local scalar conservation laws with congestion via deterministic particle method}, \n    author={Emanuela Radici and Federico Stra},\n    year={2021},\n    eprint={2107.10760},\n    archivePrefix={arXiv},\n    primaryClass={math.AP},\n    url={https://arxiv.org/abs/2107.10760}\n}","category":"page"},{"location":"#Library","page":"Home","title":"Library","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Public","page":"Home","title":"Public","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [ConservationLawsParticles]\nPrivate = false","category":"page"},{"location":"#ConservationLawsParticles.AbstractModel","page":"Home","title":"ConservationLawsParticles.AbstractModel","text":"abstract type AbstractModel\n\nAbstract type representing a particle model.\n\n\n\n\n\n","category":"type"},{"location":"#ConservationLawsParticles.IntegratedModel","page":"Home","title":"ConservationLawsParticles.IntegratedModel","text":"IntegratedModel((V₁, ...), ((W₁₁, ...), ...), (mob₁, ...)\n\nRepresents a particles system with:\n\nexternal velocities Vᵢ,\nintegrated interactions Wᵢⱼ (this is the effect of the species j on the species i),\nmobilities mobᵢ.\n\nSee also SampledModel.\n\nExamples\n\njulia> using ConservationLawsParticles.Examples, RecursiveArrayTools\n\njulia> model = IntegratedModel(\n           (V, V),\n           ((W_attr, W_rep),\n            (W_rep, W_attr)),\n           (mobρ, mobσ));\n\njulia> x = ArrayPartition(gaussian_particles(2, 4), collect(range(-3, 4, length=5)))\n([-2.000000000000003, -0.30305473018369145, 0.30305473018369145, 2.000000000000003], [-3.0, -1.25, 0.5, 2.25, 4.0])\n\njulia> velocities(x, model, 0.)\n([6.621647425385332, 0.30545649966452776, -0.42671180044513507, -6.914302510772401], [23.261098611816987, 0.9023583690557855, 0.7055593913708742, -8.774526834146023, -55.23308442021724])\n\n\n\n\n\n","category":"type"},{"location":"#ConservationLawsParticles.SampledModel","page":"Home","title":"ConservationLawsParticles.SampledModel","text":"SampledModel((V₁, ...), ((W′₁₁, ...), ...), (mob₁, ...)\n\nRepresents a particles system with:\n\nexternal velocities Vᵢ,\nsampled interactions W′ᵢⱼ (this is the effect of the species j on the species i),\nmobilities mobᵢ.\n\nSee also IntegratedModel.\n\nExamples\n\njulia> using ConservationLawsParticles.Examples, RecursiveArrayTools\n\njulia> model = SampledModel(\n           (V, V),\n           ((Wprime_attr, Wprime_rep),\n            (Wprime_rep, Wprime_attr)),\n           (mobρ, mobσ));\n\njulia> x = ArrayPartition(gaussian_particles(2, 4), collect(range(-3, 4, length=5)))\n([-2.000000000000003, -0.30305473018369145, 0.30305473018369145, 2.000000000000003], [-3.0, -1.25, 0.5, 2.25, 4.0])\n\njulia> velocities(x, model, 0.)\n([6.291136247066298, 0.2466663161150116, -0.7218917091339228, -7.22630670503873], [22.405129478914613, 1.1249366684885518, 1.5188519354999799, -7.87111869358889, -54.536397957423915])\n\n\n\n\n\n","category":"type"},{"location":"#ConservationLawsParticles.eachspecies-Tuple{AbstractModel}","page":"Home","title":"ConservationLawsParticles.eachspecies","text":"eachspecies(mod::AbstractModel) -> Any\n\n\nReturns an iterator over the indices of the species of the model.\n\n\n\n\n\n","category":"method"},{"location":"#ConservationLawsParticles.empty_like","page":"Home","title":"ConservationLawsParticles.empty_like","text":"empty_like(x::AbstractArray)\n\nCreates an empty array with the same size and eltype of x.\n\nExamples\n\njulia> empty_like([1 2 3; 4 5 6])\n2×3 Array{Int64,2}:\n 0  140456850103040                1\n 1                3  140456850103041\n\n\n\n\n\n","category":"function"},{"location":"#ConservationLawsParticles.external_velocity-Tuple{AbstractModel, Integer}","page":"Home","title":"ConservationLawsParticles.external_velocity","text":"external_velocity(mod::AbstractModel, i::Integer) -> Any\n\n\nReturns the external velocity field associated to the species i.\n\n\n\n\n\n","category":"method"},{"location":"#ConservationLawsParticles.integrated_interaction","page":"Home","title":"ConservationLawsParticles.integrated_interaction","text":"integrated_interaction([t,] x, W, ys[, dens_diff])\n\nComputes -(W * rho)(t x) = -(W * rho)(tx), where rho is the piecewise-constant density associated to the particles ys.\n\nIt t is omitted, then W(x) is assumed independent of time.\n\nnote: Note\nTo ensure the correctness of the computation, dens_diff must coincide with diff(pwc_density(ys)). It can be pre-computed and passed explicitly to allow reuse (as an optimization).\n\nSee also sampled_interaction.\n\n\n\n\n\n","category":"function"},{"location":"#ConservationLawsParticles.interaction-Tuple{AbstractModel, Integer, Integer}","page":"Home","title":"ConservationLawsParticles.interaction","text":"interaction(mod::AbstractModel, i::Integer, j::Integer) -> Any\n\n\nReturns the interaction exerted on the species i by the species j.\n\n\n\n\n\n","category":"method"},{"location":"#ConservationLawsParticles.mobility-Tuple{AbstractModel, Integer}","page":"Home","title":"ConservationLawsParticles.mobility","text":"mobility(mod::AbstractModel, i::Integer) -> Any\n\n\nReturns the mobility associated to the species i.\n\n\n\n\n\n","category":"method"},{"location":"#ConservationLawsParticles.num_species-Tuple{AbstractModel}","page":"Home","title":"ConservationLawsParticles.num_species","text":"num_species(mod::AbstractModel) -> Any\n\n\nReturns the number of species of the model.\n\n\n\n\n\n","category":"method"},{"location":"#ConservationLawsParticles.pwc_densities-Union{Tuple{Vararg{AbstractVector{var\"#s1\"} where var\"#s1\"<:Real, N}}, Tuple{N}} where N","page":"Home","title":"ConservationLawsParticles.pwc_densities","text":"pwc_densities(xs::AbstractVector...)\n\n\n\n\n\n","category":"method"},{"location":"#ConservationLawsParticles.pwc_density-Tuple{AbstractVector{var\"#s1\"} where var\"#s1\"<:Real, AbstractVector{var\"#s5\"} where var\"#s5\"<:Real}","page":"Home","title":"ConservationLawsParticles.pwc_density","text":"pwc_density(x::AbstractVector, y::AbstractVector)\n\nThe returned x_dens is indexed as x_dens[x_or_y, left_or_right, i].\n\n\n\n\n\n","category":"method"},{"location":"#ConservationLawsParticles.pwc_density-Tuple{AbstractVector{var\"#s3\"} where var\"#s3\"<:Real}","page":"Home","title":"ConservationLawsParticles.pwc_density","text":"pwc_density(x::AbstractVector)\n\nReturns the piecewise constant probability density from the quantile particle positions.\n\nLet the quantile particles be at positions x₀, x₁, …, xₙ (remember that in Julia they are actually x[1], x[2], ..., x[n], x[n+1]). The returned array R is such that R[1] = R[n+2] = 0 and R[i] = 1 / (N * (x[i] - x[i-1])) for the intermediate indices (this formula holds also for the first and last entry if we assume x[0] = -∞ and x[n+2] = ∞).\n\nExamples\n\njulia> pwc_density([0, 1, 3])\n4-element Vector{Float64}:\n 0.0\n 0.5\n 0.25\n 0.0\n\n\n\n\n\n","category":"method"},{"location":"#ConservationLawsParticles.sampled_interaction","page":"Home","title":"ConservationLawsParticles.sampled_interaction","text":"sampled_interaction([t,] x, W′, ys)\n\nComputes -(W * dotrho)(t x), which is the sampled approximation of -(W * rho)(t x), where rho is the piecewise-constant density associated to the particles ys.\n\nIt t is omitted, then W′(x) is assumed independent of time.\n\nSee also integrated_interaction.\n\n\n\n\n\n","category":"function"},{"location":"#ConservationLawsParticles.species-Tuple{Any, Integer}","page":"Home","title":"ConservationLawsParticles.species","text":"species(state, i::Integer) -> Any\n\n\nReturns the particles associated to the species i.\n\n\n\n\n\n","category":"method"},{"location":"#ConservationLawsParticles.@time_independent-Tuple{Any}","page":"Home","title":"ConservationLawsParticles.@time_independent","text":"Automatically define a method which takes time as first argument and discards it.\n\nExamples\n\nThe definition\n\n@time_independent V(x) = -x^3\n\nis equivalent to\n\nV(x) = -x^3\nV(t, x) = V(x)\n\nThis also works with more than one argument, for instance\n\n@time_independent V(x₁, x₂) = x₁ * x₂\n\nis equivalent to\n\nV(x₁, x₂) = x₁ * x₂\nV(t, x₁, x₂) = V(x₁, x₂)\n\n\n\n\n\n","category":"macro"},{"location":"#Private","page":"Home","title":"Private","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [ConservationLawsParticles]\nPublic = false","category":"page"},{"location":"#ConservationLawsParticles.make_velocity-Tuple{Function, Function, Function}","page":"Home","title":"ConservationLawsParticles.make_velocity","text":"make_velocity(V::Function, Wprime::Function, mobility::Function)\n\nCreates a function velocity(dx, x, p, t) that computes the velocity of the particles under the influence of an external force V, a mutual interaction Wprime and the congestion given by mobility.\n\n\n\n\n\n","category":"method"}]
}
